// Generated by CoffeeScript 1.12.6
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery'], factory);
    } else if (typeof module === 'object' && module.exports) {
      return module.exports = factory(require('lodash'), require('q').defer, require('najax'));
    } else if (root.angular) {
      return root.angular.module('hybind', []).factory('hybind', [
        '$q', '$http', function(q, http) {
          var req;
          req = function(opts) {
            var d;
            d = q.defer();
            http(opts).then((function(res) {
              return d.resolve(res.data, res);
            }), d.reject);
            return d.promise;
          };
          return factory(root.angular, q.defer, req);
        }
      ]);
    } else if (root.jQuery || root.$) {
      return root.hybind = factory(root.jQuery || root.$);
    } else {
      return root.hybind = factory();
    }
  })(this, function(fw, deferred, http) {
    var clean, extend, hybind, makeUrl, promise, selfLink, str;
    promise = deferred || !fw ? function(d) {
      return d.promise;
    } : function(d) {
      return d.promise();
    };
    if (fw) {
      extend = fw.extend;
      if (deferred == null) {
        deferred = fw.Deferred;
      }
      if (http == null) {
        http = fw.ajax;
      }
    } else {
      extend = function(first, second) {
        var secondProp, secondVal;
        for (secondProp in second) {
          secondVal = second[secondProp];
          if (secondVal && Object.prototype.toString.call(secondVal) === '[object Object]') {
            first[secondProp] = first[secondProp] || {};
            extend(first[secondProp], secondVal);
          } else {
            first[secondProp] = secondVal;
          }
        }
        return first;
      };
      deferred = function() {
        var d, p;
        d = {};
        p = new window.Promise(function(resolve, reject) {
          d.resolve = resolve;
          return d.reject = reject;
        });
        d.promise = p;
        return d;
      };
      http = function(opts) {
        var d;
        opts.headers = new Headers(opts.headers);
        opts.body = opts.data;
        d = deferred();
        window.fetch(opts.url, opts).then(function(res) {
          if (res.ok) {
            return d.resolve(res.text());
          } else {
            return d.reject(res, d.reject);
          }
        });
        return promise(d);
      };
    }
    selfLink = function(obj) {
      var ref1;
      return obj != null ? (ref1 = obj.$bind) != null ? ref1.self : void 0 : void 0;
    };
    clean = function(url) {
      if (url) {
        return String(url).replace(/{.*}/g, '');
      }
    };
    str = function(obj, attached) {
      var array, root;
      array = void 0;
      root = true;
      return JSON.stringify(obj, function(k, v) {
        var ref1, result;
        if (!root) {
          if (attached && (attached.length === 0 || indexOf.call(attached, k) >= 0) || array) {
            if (!(v instanceof Array)) {
              result = v != null ? (ref1 = v.$bind) != null ? ref1.self : void 0 : void 0;
            } else if (attached.length === 0 || indexOf.call(attached, k) >= 0) {
              array = k;
              result = v.slice(0);
            }
          }
          if (!(typeof k === 'number') && array === !k) {
            array = false;
          }
        }
        root = false;
        return result || (k === '' || !(v != null ? v.$bind : void 0) ? v : void 0);
      });
    };
    makeUrl = function(baseUrl, pathOrUrl) {
      if (!pathOrUrl) {
        return;
      }
      if (baseUrl.slice(-1) !== '/') {
        baseUrl += '/';
      }
      if (pathOrUrl.indexOf(':') === -1) {
        return baseUrl + encodeURI(pathOrUrl);
      } else {
        return pathOrUrl;
      }
    };
    hybind = function(url, defaults) {
      var bind, collMapper, defProp, enrich, idFn, req, root;
      if (defaults == null) {
        defaults = {};
      }
      if (defaults.headers == null) {
        defaults.headers = {};
      }
      extend(defaults.headers, {
        Accept: 'application/json'
      });
      idFn = function() {
        return null;
      };
      bind = function(item) {
        var i, j, len, link, name, p, ref1, ref2, ref3, ref4, results, self;
        if (item != null ? item._links : void 0) {
          ref1 = item._links;
          for (name in ref1) {
            link = ref1[name];
            self = null;
            if (name !== 'self') {
              if ((((ref2 = item.$bind) != null ? ref2.self : void 0) !== clean(link.href)) && item[name] !== null) {
                p = item[name] || (item[name] = {});
                item.$bind(p, link.href);
                item.$bind.refs[name] = link.href;
                bind(item[name]);
              }
            } else {
              item.$bind.self = clean(link.href);
            }
          }
          delete item._links;
        }
        if (item instanceof Array) {
          results = [];
          for (j = 0, len = item.length; j < len; j++) {
            i = item[j];
            link = i != null ? (ref3 = i._links) != null ? (ref4 = ref3.self) != null ? ref4.href : void 0 : void 0 : void 0;
            if (link) {
              enrich(i, link);
              results.push(bind(i));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      };
      collMapper = function(obj, coll) {
        var item, j, k, len, link, ref1, ref2, ref3, ref4, v;
        coll.length = 0;
        if (obj._embedded) {
          ref1 = obj._embedded;
          for (k in ref1) {
            v = ref1[k];
            for (j = 0, len = v.length; j < len; j++) {
              item = v[j];
              link = item != null ? (ref2 = item._links) != null ? (ref3 = ref2.self) != null ? ref3.href : void 0 : void 0 : void 0;
              coll.push(item);
              if (link) {
                enrich(item, link);
                item.$bind.ref = (coll != null ? (ref4 = coll.$bind) != null ? ref4.self : void 0 : void 0) + '/' + link.split('/').slice(-1);
              }
              bind(item);
            }
            break;
          }
          delete obj.embedded;
          return Object.defineProperty(coll, '$resource', {
            configurable: true,
            enumerable: false,
            value: obj
          });
        }
      };
      req = function(r, params, opts, result, attached) {
        var d, k, sep, v;
        d = deferred();
        if (opts == null) {
          opts = {};
        }
        extend(opts, defaults);
        extend(opts, r);
        opts.headers = {};
        if (defaults.headers) {
          extend(opts.headers, defaults.headers);
        }
        if (r.headers) {
          extend(opts.headers, r.headers);
        }
        if (typeof opts.data === 'string') {
          extend(opts.headers, {
            'Content-Type': 'text/uri-list'
          });
        }
        if (typeof opts.data === 'object') {
          extend(opts.headers, {
            'Content-Type': 'application/json'
          });
          opts.data = str(opts.data, opts.method === 'POST' ? [] : attached);
        }
        if (params) {
          sep = opts.url.indexOf('?') === -1 ? '?' : '&';
          opts.url = opts.url + sep + ((function() {
            var results;
            results = [];
            for (k in params) {
              v = params[k];
              results.push(k + "=" + v);
            }
            return results;
          })()).join("&");
        }
        hybind.http(opts).then(function(data, s, r) {
          var e;
          try {
            if (typeof data === 'string' && data !== '') {
              data = JSON.parse(data);
            }
          } catch (error) {
            e = error;
            d.reject(e);
          }
          return d.resolve(result || data);
        }, d.reject);
        return promise(d);
      };
      defProp = function(obj, name, value) {
        return Object.defineProperty(obj, name, {
          configurable: true,
          enumerable: false,
          value: value
        });
      };
      enrich = function(obj, url) {
        var base;
        if (!obj.$bind) {
          defProp(obj, '$bind', function() {
            var arg, args, link, pathOrUrl, prev, prop, ref, ref1, ref2, ref3, ref4, target;
            args = Array.prototype.slice.call(arguments);
            arg = args[0];
            if (typeof arg === 'object') {
              target = arg;
              args.shift();
            } else {
              prop = arg;
              prev = (ref1 = obj[prop]) != null ? (ref2 = ref1.$bind) != null ? ref2.ref : void 0 : void 0;
              target = obj[prop] || (obj[prop] = {});
            }
            link = args[0];
            if (typeof link === 'function') {
              link = link(target);
            }
            if (link === void 0) {
              link = idFn(target);
            }
            arg = args[1];
            if (typeof arg === 'object') {
              target = arg;
              if (prop) {
                obj[prop] = target;
              }
              args.shift();
            } else {
              prev = null;
            }
            pathOrUrl = args[1];
            if (pathOrUrl == null) {
              pathOrUrl = link;
            }
            pathOrUrl = clean(pathOrUrl);
            ref = ((ref3 = obj.$bind.refs) != null ? ref3[prop] : void 0) || prev || clean(makeUrl(selfLink(obj), pathOrUrl));
            if (!target.$bind) {
              if (!pathOrUrl) {
                throw 'No property or id specified';
              }
              return enrich(target, ref);
            } else {
              if (obj instanceof Array) {
                target.$bind.ref = ((ref4 = obj.$bind) != null ? ref4.self : void 0) + '/' + target.$bind.self.split('/').slice(-1);
              } else {
                target.$bind.ref = ref;
              }
              return target;
            }
          });
        }
        obj.$bind.refs = {};
        if (url) {
          obj.$bind.ref = clean(url);
          if ((base = obj.$bind).self == null) {
            base.self = obj.$bind.ref;
          }
        }
        defProp(obj, '$load', function(params, opts) {
          var d;
          d = deferred();
          req({
            method: 'GET',
            url: obj.$bind.ref
          }, params, opts).then(function(data) {
            var prop;
            if (data._embedded && data._embedded[Object.keys(data._embedded)[0]] instanceof Array && !(obj instanceof Array)) {
              if (Object.setPrototypeOf) {
                Object.setPrototypeOf(obj, Array.prototype);
              } else {
                obj.__proto__ = Array.prototype;
              }
              enrich(obj);
            }
            if (obj instanceof Array) {
              collMapper(data, obj);
            } else {
              for (prop in obj) {
                if (typeof obj[prop] !== 'function') {
                  obj[prop] = void 0;
                }
              }
              extend(obj, data);
              bind(obj);
            }
            return d.resolve(obj);
          }, d.reject);
          return promise(d);
        });
        if (obj instanceof Array) {
          defProp(obj, '$add', function(items, params, opts) {
            var data, item;
            if (!(items instanceof Array)) {
              items = [items];
            }
            data = (function() {
              var j, len, results;
              results = [];
              for (j = 0, len = items.length; j < len; j++) {
                item = items[j];
                results.push(selfLink(item));
              }
              return results;
            })();
            return req({
              method: 'POST',
              url: selfLink(obj),
              data: data.join('\n')
            }, params, opts, obj);
          });
          defProp(obj, '$save', function(params, opts) {
            var data, item;
            data = (function() {
              var j, len, results;
              results = [];
              for (j = 0, len = obj.length; j < len; j++) {
                item = obj[j];
                results.push(selfLink(item));
              }
              return results;
            })();
            return req({
              method: 'PUT',
              url: selfLink(obj),
              data: data.join('\n')
            }, params, opts, obj);
          });
          delete obj.$set;
        } else {
          defProp(obj, '$set', function(item, params, opts) {
            if (item == null) {
              item = obj;
            }
            return req({
              method: 'PUT',
              url: obj.$bind.ref,
              data: selfLink(item)
            }, params, opts, obj);
          });
          defProp(obj, '$save', function(params, opts) {
            var attached;
            if (params instanceof Array) {
              attached = params;
              params = void 0;
            }
            if (opts instanceof Array) {
              attached = opts;
              opts = void 0;
            }
            return req({
              method: 'PUT',
              url: selfLink(obj),
              data: obj
            }, params, opts, obj, attached);
          });
          delete obj.$add;
        }
        defProp(obj, '$create', function(item, params, opts) {
          var d;
          d = deferred();
          req({
            method: 'POST',
            url: selfLink(obj),
            data: item || {}
          }, params, opts).then(function(data) {
            if (item) {
              extend(item, data);
            }
            if (item == null) {
              item = data;
            }
            enrich(item, data._links.self.href);
            delete item._links;
            return d.resolve(item);
          }, d.reject);
          return promise(d);
        });
        defProp(obj, '$delete', function(params, opts) {
          if (obj.$bind.self) {
            return req({
              method: 'DELETE',
              url: obj.$bind.self
            }, params, opts, obj);
          } else {
            return obj.$load(params, opts).then(function() {
              return req({
                method: 'DELETE',
                url: obj.$bind.self
              }, params, opts, obj);
            });
          }
        });
        defProp(obj, '$remove', function(params, opts) {
          return req({
            method: 'DELETE',
            url: obj.$bind.ref
          }, params, opts, obj);
        });
        defProp(obj, '$share', function() {
          var arg, args, cache, cached, cb, item, link, prop;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          while (args.length > 0) {
            arg = args.shift();
            switch (typeof arg) {
              case 'string':
                prop = arg;
                break;
              case 'object':
                cache = arg;
                break;
              case 'function':
                cb = arg;
            }
          }
          item = prop ? obj[prop] : obj;
          link = selfLink(item);
          if (cache == null) {
            cache = defaults != null ? defaults.cache : void 0;
          }
          cached = cache[link];
          if (prop && cached) {
            obj[prop] = cached;
          }
          if (!cached) {
            cache[link] = item;
          }
          if (cb && !cached) {
            cb(item);
          }
          return item;
        });
        return obj;
      };
      root = {
        $id: function(fn) {
          return idFn = fn;
        }
      };
      return enrich(root, url);
    };
    hybind.http = http;
    return hybind;
  });

}).call(this);
